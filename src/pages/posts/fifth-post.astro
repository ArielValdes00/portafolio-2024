---
import BlogPost from "../../components/BlogPost";
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../partials/Navbar.astro";

const post = {
  title: "Display LED de 7 Segmentos",
  content: `¡Hola a todos! En esta ocasión, continuamos con nuestro emocionante proyecto de robótica con Arduino. Hoy nos enfocaremos en los displays LED de 7 segmentos, tanto de 1 dígito como de 4 dígitos, y descubriremos cómo utilizarlos para mostrar información útil en nuestros proyectos.

Estos displays son componentes esenciales en numerosos dispositivos electrónicos, permitiéndonos visualizar números y algunos caracteres de manera clara y sencilla. Vamos a ver cómo controlarlos con Arduino.

Para simplificar el control de los displays, utilizaremos el registro de desplazamiento 74HC595. Este es un componente que nos permite controlar múltiples salidas con solo unos pocos pines del Arduino, facilitando la gestión de los segmentos del display.

Primero, vamos a utilizar un display LED de 7 segmentos para mostrar números del 0 al 9. A continuación, te mostraré el código que implementa esta funcionalidad:`,
  image: "/images/post-five.jpg",
  date: "12 de Julio, 2024",
  code: `// Pines conectados al 74HC595
const int dataPin = 11;   // DS (MOSI)
const int latchPin = 10;  // ST_CP (RCLK)
const int clockPin = 13;  // SH_CP (SRCLK)

// Mapa de segmentos para los dígitos 0-9 para un display de ánodo común
byte digits[10] = {
  0b11000000,  // 0
  0b11111001,  // 1
  0b10100100,  // 2
  0b10110000,  // 3
  0b10011001,  // 4
  0b10010010,  // 5
  0b10000010,  // 6
  0b11111000,  // 7
  0b10000000,  // 8
  0b10010000   // 9
};

void setup() {
  // Configurar los pines como salida
  pinMode(dataPin, OUTPUT);
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
}

void loop() {
  for (int i = 0; i < 10; i++) {
    displayDigit(i);
    delay(1000); // Espera 1 segundo entre cada número
  }
}

void displayDigit(int digit) {
  // Encender el latch
  digitalWrite(latchPin, LOW);
  // Enviar el byte al registro de desplazamiento
  shiftOut(dataPin, clockPin, MSBFIRST, digits[digit]);
  // Apagar el latch para actualizar el display
  digitalWrite(latchPin, HIGH);
}
`,
  code2: `// Definición de pines para el 74HC595
const int latchPin = 8;   // ST_CP
const int clockPin = 13;  // SH_CP
const int dataPin = 12;   // DS

// Pines digitales para controlar los dígitos del display de 4 dígitos
const int digit1Pin = 2;
const int digit2Pin = 3;
const int digit3Pin = 4;
const int digit4Pin = 5;

// Tabla de segmentos para los números 0-9 (configuración común catodo)
const byte numbers[10] = {
  0b00111111,  // 0
  0b00000110,  // 1
  0b01011011,  // 2
  0b01001111,  // 3
  0b01100110,  // 4
  0b01101101,  // 5
  0b01111101,  // 6
  0b00000111,  // 7
  0b01111111,  // 8
  0b01101111   // 9
};

void setup() {
  // Configurar pines como salida
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  pinMode(digit1Pin, OUTPUT);
  pinMode(digit2Pin, OUTPUT);
  pinMode(digit3Pin, OUTPUT);
  pinMode(digit4Pin, OUTPUT);
  
  // Inicializar el registro de desplazamiento
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin, clockPin, MSBFIRST, 0);  // Limpiar el registro
  digitalWrite(latchPin, HIGH);
}

void loop() {
  // Contador de 0 a 9999
  for (int i = 0; i < 10000; i++) {
    displayNumber(i);  // Mostrar el número actual
    delay(1000);       // Esperar 1 segundo
  }
}

void displayNumber(int num) {
  // Asegurarse de que el número esté en el rango 0-9999
  if (num < 0 || num > 9999) return;
  
  // Convertir el número en dígitos individuales
  int units = num % 10;
  int tens = (num / 10) % 10;
  int hundreds = (num / 100) % 10;
  int thousands = (num / 1000) % 10;
  
  // Mostrar los dígitos en el display de 4 dígitos
  displayDigit(thousands, digit4Pin);
  displayDigit(hundreds, digit3Pin);
  displayDigit(tens, digit2Pin);
  displayDigit(units, digit1Pin);
}

void displayDigit(int digit, int digitPin) {
  // Activar el dígito correspondiente
  digitalWrite(digitPin, HIGH);
  
  // Enviar los datos al registro de desplazamiento
  digitalWrite(latchPin, LOW);   // Preparar el registro para recibir datos
  shiftOut(dataPin, clockPin, MSBFIRST, numbers[digit]); // Enviar el byte de datos
  digitalWrite(latchPin, HIGH);  // Actualizar la salida del registro
  
  // Desactivar el dígito
  digitalWrite(digitPin, LOW);
}
`,
  contentPostCode:
    "En este video, se ve cómo utilizar un display LED de 7 segmentos para mostrar números del 0 al 9.",
  contentPostCode2:
    "Finalmente, en este segundo video, muestro cómo funciona un display LED de 4 dígitos",
  contentPostVideo: `A continuación, vamos a agregar un display LED de 7 segmentos de 4 dígitos para mostrar números. Este display tiene 12 pines en total, 6 en cada lado, a diferencia del display de 1 dígito que tiene 10 pines, 5 en cada lado.

Es importante que miren bien el datasheet para conectar correctamente los pines. Aquí tienes el código necesario para esta parte del proyecto:`,
  contentPostVideo2:
    "Esto concluye nuestra introducción al uso del display LED de 7 segmentos.",
  video: "/videos/fifth-post.mp4",
  video2: "/videos/fifth-post-2.mp4",
  links: [
    {
      label: "Datasheet del Display LED de 7 segmentos",
      url: "https://pdf1.alldatasheet.es/datasheet-pdf/view/96548/ETC/TOS5161.html",
    },
    {
      label: "Datasheet del Display LED de 7 segmentos de 4 dígitos",
      url: "https://www.bolanosdj.com.ar/MOVIL/ARDUINO2/segmentos7x4.pdf",
    },
    {
      label: "Datasheet del 74HC595",
      url: "https://www.diodes.com/assets/Datasheets/74HC595.pdf",
    },
    {
      label: "Video Tutorial",
      url: "https://www.youtube.com/watch?v=KJaL4YYFNSk",
    },
  ],
};
---

<Layout title="Welcome to Astro.">
  <Navbar />
  <BlogPost
    client:only="react"
    title={post.title}
    content={post.content}
    contentPostCode={post.contentPostCode}
    contentPostCode2={post.contentPostCode2}
    image={post.image}
    codeString={post?.code}
    date={post.date}
    links={post.links}
    video={post.video}
    video2={post.video2}
    contentPostVideo={post.contentPostVideo}
    code2={post.code2}
    contentPostVideo2={post.contentPostVideo2}
  />
</Layout>
